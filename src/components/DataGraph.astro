---
interface Props {
  data: number[];
  width?: string;
  height?: string;
  backgroundColor?: string;
  lineColor?: string;
  title?: string;
  xLabel?: string;
  yLabel?: string;
  showGrid?: boolean;
}

const { 
  data,
  width = "100%", 
  height = "400px",
  backgroundColor = "rgba(255, 255, 255, 0.8)",
  lineColor = "rgba(54, 162, 235, 1)",
  title = "",
  xLabel = "",
  yLabel = "",
  showGrid = true
} = Astro.props;

// Generate a unique ID
const chartId = `chart-${Math.random().toString(36).substring(2, 9)}`;
---

<!-- Load Chart.js library first -->
<script is:inline src="https://cdn.jsdelivr.net/npm/chart.js@4.4.2/dist/chart.umd.min.js"></script>

<!-- Graph container -->
<figure class="graph-container">
  <div style={`width:${width}; height:${height}; position:relative;`}>
    <canvas id={chartId}></canvas>
  </div>
  {title && <figcaption>{title}</figcaption>}
</figure>

<!-- Graph initialization script with client:idle for better loading behavior -->
<script define:vars={{ data, chartId, lineColor, backgroundColor, xLabel, yLabel, showGrid, title }} client:idle>
  // Generate labels based on data length
  const labels = Array.from({ length: data.length }, (_, i) => i + 1);
  
  // Check for element existence and Chart.js initialization
  function initChart() {
    const ctx = document.getElementById(chartId);
    
    if (ctx && window.Chart) {
      try {
        new Chart(ctx, {
          type: 'line',
          data: {
            labels: labels,
            datasets: [{
              label: title,
              data: data,
              borderColor: lineColor,
              backgroundColor: lineColor.replace('1)', '0.1)'), // Transparent fill
              borderWidth: 2,
              tension: 0.2,
              pointRadius: 1,
              pointHoverRadius: 5,
              fill: true
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                display: title ? true : false,
              },
              tooltip: {
                callbacks: {
                  title: function(tooltipItems) {
                    return `Data point: ${tooltipItems[0].label}`;
                  },
                  label: function(context) {
                    return `Value: ${context.parsed.y.toFixed(4)}`;
                  }
                }
              }
            },
            scales: {
              x: {
                display: true,
                title: {
                  display: !!xLabel,
                  text: xLabel
                },
                grid: {
                  display: showGrid
                }
              },
              y: {
                display: true,
                title: {
                  display: !!yLabel,
                  text: yLabel
                },
                grid: {
                  display: showGrid
                }
              }
            }
          }
        });
        console.log(`Graph '${chartId}' initialized successfully with ${data.length} data points`);
      } catch (error) {
        console.error(`Graph initialization error: ${error.message}`);
      }
    } else {
      // Retry if element or Chart.js not found
      setTimeout(initChart, 50);
    }
  }
  
  // Start initialization immediately
  initChart();
</script>

<style>
  .graph-container {
    margin: 2rem 0;
  }
  
  figcaption {
    text-align: center;
    margin-top: 0.5rem;
    font-size: 0.9rem;
    color: #666;
  }
</style>
